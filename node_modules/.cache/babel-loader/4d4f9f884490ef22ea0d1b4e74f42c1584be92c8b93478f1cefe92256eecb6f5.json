{"ast":null,"code":"export class Player{//TODO: implement (optional) player number, if the field was filled out on creation, then display that info.\n//otherwise, auto-increment the player id starting from the lowest available number on the current team\n//  id:number;\n//TODO use mongoDB for player ids, like i did for chess games\nconstructor(name,playerType,currentPosition){this.name=void 0;this.playerType=void 0;this.currentPosition=void 0;this.onCourt=false;this.playerLink=void 0;this.serving=true;this.num=void 0;//todo: figure out currentPosition value, is it like player number? or is it like, rotation location?\nthis.name=name;this.playerType=playerType;this.currentPosition=currentPosition;}/**\n     * hasPlayerLink defines a substitution connection between this player and a different player. The Position type of the player object\n     * will be used to determine what occurs when this player rotates/transitions between the front and back rows\n     */hasPlayerLink(){return this.playerLink!==undefined;}setName(name){this.name=name;}getName(){return this.name;}setPlayerType(playerType){this.playerType=playerType;}getPlayerType(){return this.playerType;}//rotation position\nsetCurrentPosition(currentPosition){this.currentPosition=currentPosition;}getCurrentPosition(){return this.currentPosition;}setOnCourt(onCourt){this.onCourt=onCourt;}isOnCourt(){return this.onCourt;}setServing(serving){this.serving=serving;}isServing(){return this.serving;}getPlayerLink(){return this.playerLink;}setPlayerLink(player){this.playerLink=player;}getNumber(){return this.num;}setNumber(num){this.num=num;}toString(){return JSON.stringify(this);}}","map":{"version":3,"names":["Player","constructor","name","playerType","currentPosition","onCourt","playerLink","serving","num","hasPlayerLink","undefined","setName","getName","setPlayerType","getPlayerType","setCurrentPosition","getCurrentPosition","setOnCourt","isOnCourt","setServing","isServing","getPlayerLink","setPlayerLink","player","getNumber","setNumber","toString","JSON","stringify"],"sources":["/Users/adamhayes/RotationHelper/src/components/Player.tsx"],"sourcesContent":["import { Position } from \"../enums/Position\";\n\nexport class Player {\n    name: String;\n    playerType: Position;\n    currentPosition: number;\n    onCourt: boolean = false;\n    playerLink: Player;\n    serving: boolean = true;\n    num:number;\n\n    //TODO: implement (optional) player number, if the field was filled out on creation, then display that info.\n    //otherwise, auto-increment the player id starting from the lowest available number on the current team\n\n\n    //  id:number;\n    //TODO use mongoDB for player ids, like i did for chess games\n\n    constructor(name: String, playerType: Position, currentPosition: number) {\n        //todo: figure out currentPosition value, is it like player number? or is it like, rotation location?\n        this.name = name;\n        this.playerType = playerType;\n        this.currentPosition = currentPosition;\n    }\n\n\n    /**\n     * hasPlayerLink defines a substitution connection between this player and a different player. The Position type of the player object\n     * will be used to determine what occurs when this player rotates/transitions between the front and back rows\n     */\n    public hasPlayerLink(): boolean {\n        return this.playerLink !== undefined;\n    }\n\n    public setName(name: String) {\n        this.name = name;\n    }\n    public getName(): String {\n        return this.name;\n    }\n\n    public setPlayerType(playerType: Position) {\n        this.playerType = playerType;\n    }\n\n    public getPlayerType(): Position {\n        return this.playerType;\n    }\n\n\n    //rotation position\n    public setCurrentPosition(currentPosition: number) {\n        this.currentPosition = currentPosition;\n    }\n\n    public getCurrentPosition(): number {\n        return this.currentPosition;\n    }\n\n    public setOnCourt(onCourt: boolean) {\n        this.onCourt = onCourt;\n    }\n\n    public isOnCourt(): boolean {\n        return this.onCourt;\n    }\n\n    public setServing(serving: boolean) {\n        this.serving = serving;\n    }\n\n    public isServing(): boolean {\n        return this.serving;\n    }\n\n    public getPlayerLink():Player | undefined {\n        return this.playerLink;\n    }\n\n    public setPlayerLink(player:Player)\n    {\n        this.playerLink = player;\n    }\n\n    public getNumber():number {\n        return this.num;\n    }\n\n    public setNumber(num:number) {\n        this.num = num;\n    }\n\n    public toString():string {\n        return JSON.stringify(this);\n    }\n}"],"mappings":"AAEA,MAAO,MAAM,CAAAA,MAAO,CAShB;AACA;AAGA;AACA;AAEAC,WAAWA,CAACC,IAAY,CAAEC,UAAoB,CAAEC,eAAuB,CAAE,MAfzEF,IAAI,aACJC,UAAU,aACVC,eAAe,aACfC,OAAO,CAAY,KAAK,MACxBC,UAAU,aACVC,OAAO,CAAY,IAAI,MACvBC,GAAG,QAUC;AACA,IAAI,CAACN,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACC,UAAU,CAAGA,UAAU,CAC5B,IAAI,CAACC,eAAe,CAAGA,eAAe,CAC1C,CAGA;AACJ;AACA;AACA,OACWK,aAAaA,CAAA,CAAY,CAC5B,MAAO,KAAI,CAACH,UAAU,GAAKI,SAAS,CACxC,CAEOC,OAAOA,CAACT,IAAY,CAAE,CACzB,IAAI,CAACA,IAAI,CAAGA,IAAI,CACpB,CACOU,OAAOA,CAAA,CAAW,CACrB,MAAO,KAAI,CAACV,IAAI,CACpB,CAEOW,aAAaA,CAACV,UAAoB,CAAE,CACvC,IAAI,CAACA,UAAU,CAAGA,UAAU,CAChC,CAEOW,aAAaA,CAAA,CAAa,CAC7B,MAAO,KAAI,CAACX,UAAU,CAC1B,CAGA;AACOY,kBAAkBA,CAACX,eAAuB,CAAE,CAC/C,IAAI,CAACA,eAAe,CAAGA,eAAe,CAC1C,CAEOY,kBAAkBA,CAAA,CAAW,CAChC,MAAO,KAAI,CAACZ,eAAe,CAC/B,CAEOa,UAAUA,CAACZ,OAAgB,CAAE,CAChC,IAAI,CAACA,OAAO,CAAGA,OAAO,CAC1B,CAEOa,SAASA,CAAA,CAAY,CACxB,MAAO,KAAI,CAACb,OAAO,CACvB,CAEOc,UAAUA,CAACZ,OAAgB,CAAE,CAChC,IAAI,CAACA,OAAO,CAAGA,OAAO,CAC1B,CAEOa,SAASA,CAAA,CAAY,CACxB,MAAO,KAAI,CAACb,OAAO,CACvB,CAEOc,aAAaA,CAAA,CAAsB,CACtC,MAAO,KAAI,CAACf,UAAU,CAC1B,CAEOgB,aAAaA,CAACC,MAAa,CAClC,CACI,IAAI,CAACjB,UAAU,CAAGiB,MAAM,CAC5B,CAEOC,SAASA,CAAA,CAAU,CACtB,MAAO,KAAI,CAAChB,GAAG,CACnB,CAEOiB,SAASA,CAACjB,GAAU,CAAE,CACzB,IAAI,CAACA,GAAG,CAAGA,GAAG,CAClB,CAEOkB,QAAQA,CAAA,CAAU,CACrB,MAAO,CAAAC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC,CAC/B,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}