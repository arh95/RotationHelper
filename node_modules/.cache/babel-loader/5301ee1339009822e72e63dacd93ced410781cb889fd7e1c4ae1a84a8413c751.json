{"ast":null,"code":"var _jsxFileName = \"/Users/adamhayes/RotationHelper/src/components/RosterWidget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { Position } from '../enums/Position';\nimport Button from '@mui/material/Button';\nimport './RosterWidget.css';\nimport AddPlayerModal from './AddPlayerModal';\nimport PlayerInRosterWidget from './PlayerInRosterWidget';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Roster() {\n  _s();\n  //TODO: this roster list gets \n  const [rosterList, setRosterList] = useState(new Array());\n  const [showAddPlayerModal, setShowAddPlayerModal] = useState(false);\n  const nextValidPlayerNumber = useRef(1);\n\n  //TODO: add collapse/expand roster section controls (introduce accordion panel?)\n\n  function sortRosterList(list) {\n    list.sort((a, b) => a.getNumber() - b.getNumber());\n    return list;\n  }\n\n  //this function is intended to run after a player has been created but BEFORE that player gets assigned a number and added to the roster list\n  function generatePlayerNumber() {\n    if (rosterList.length === 0) {\n      //if no other players are in the roster list, then we can start at 1 for the player number\n      return 1;\n    } else {\n      let rosterListCopy = [];\n      for (let player of rosterList) {\n        rosterListCopy.push(player);\n      }\n      rosterListCopy = sortRosterList(rosterListCopy);\n      let lowestAvailableNumber = 1;\n      for (let i = 0; i < rosterListCopy.length; i++) {\n        if (rosterListCopy[i].getNumber() === lowestAvailableNumber) {\n          lowestAvailableNumber++;\n        } else {\n          //if in the array sorted by player number, we find a Player whose number does not equal our incremental\n          //tracker, that means that we can use our tracker's value as the number\n          return lowestAvailableNumber;\n        }\n      }\n      //if we reach the end of the array without finding a number that is free for use, use the incremented value which \n      //should not be present in the array\n      return lowestAvailableNumber;\n    }\n  }\n  function addPlayerToRoster(newPlayer) {\n    newPlayer.setNumber(generatePlayerNumber());\n    let rosterListCopy = [];\n    Position.getValidPositions().forEach(position => {\n      console.log(position.getLabel);\n      let playersOfType = [];\n      for (let player of rosterList) {\n        if (player.getPlayerType().key == position.key) {\n          playersOfType.push(player);\n        }\n      }\n      if (newPlayer.getPlayerType() == position) {\n        console.log(\"MATCH in position type\");\n        playersOfType.push(newPlayer);\n      }\n      rosterListCopy = rosterListCopy.concat(playersOfType);\n    });\n    console.log(rosterListCopy);\n    // rosterListCopy = sortRosterList(rosterListCopy);\n    setRosterList(rosterListCopy);\n    displayAddPlayerModal(false);\n  }\n\n  //TODO: detection function to make sure that auto increment of player numbers goes smoothly, and takes into account team members that already exist\n\n  function displayAddPlayerModal(showModal) {\n    setShowAddPlayerModal(showModal);\n  }\n  function resetAddPlayerModal() {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RosterWidget\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RosterDisplay\",\n      children: rosterList.filter(player => !player.isOnCourt()).map((player, index) => /*#__PURE__*/_jsxDEV(PlayerInRosterWidget, {\n        player: player\n      }, player.getNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"showModal\",\n      onClick: () => displayAddPlayerModal(true),\n      children: \"Add Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AddPlayerModal, {\n      isOpen: showAddPlayerModal,\n      cancelAction: value => {\n        displayAddPlayerModal(value);\n      },\n      submitAction: value => {\n        addPlayerToRoster(value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(Roster, \"5XKnyPJltNDO3U2TZYEA57zigIE=\");\n_c = Roster;\nexport default Roster;\nvar _c;\n$RefreshReg$(_c, \"Roster\");","map":{"version":3,"names":["React","useRef","useState","Position","Button","AddPlayerModal","PlayerInRosterWidget","jsxDEV","_jsxDEV","Roster","_s","rosterList","setRosterList","Array","showAddPlayerModal","setShowAddPlayerModal","nextValidPlayerNumber","sortRosterList","list","sort","a","b","getNumber","generatePlayerNumber","length","rosterListCopy","player","push","lowestAvailableNumber","i","addPlayerToRoster","newPlayer","setNumber","getValidPositions","forEach","position","console","log","getLabel","playersOfType","getPlayerType","key","concat","displayAddPlayerModal","showModal","resetAddPlayerModal","className","children","filter","isOnCourt","map","index","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","isOpen","cancelAction","value","submitAction","_c","$RefreshReg$"],"sources":["/Users/adamhayes/RotationHelper/src/components/RosterWidget.tsx"],"sourcesContent":["import React, { MutableRefObject, useRef, useState } from 'react';\nimport { Player } from './Player';\nimport PlayerOnCourtWidget from './PlayerOnCourtWidget';\nimport { Position } from '../enums/Position';\nimport Button from '@mui/material/Button';\n\nimport './RosterWidget.css';\nimport Modal from 'react-modal';\nimport AddPlayerModal from './AddPlayerModal';\nimport PlayerInRosterWidget from './PlayerInRosterWidget';\n\nfunction Roster() {\n    //TODO: this roster list gets \n    const [rosterList, setRosterList] = useState(new Array<Player>());\n    const [showAddPlayerModal, setShowAddPlayerModal] = useState(false);\n    const nextValidPlayerNumber: MutableRefObject<number> = useRef(1);\n\n    //TODO: add collapse/expand roster section controls (introduce accordion panel?)\n\n    function sortRosterList(list: Player[]): Player[] {\n        list.sort((a: Player, b: Player) => a.getNumber() - b.getNumber());\n        return list;\n    }\n\n    //this function is intended to run after a player has been created but BEFORE that player gets assigned a number and added to the roster list\n    function generatePlayerNumber(): number {\n        if (rosterList.length === 0) {\n            //if no other players are in the roster list, then we can start at 1 for the player number\n            return 1;\n        }\n        else {\n            let rosterListCopy: Player[] = [];\n            for (let player of rosterList) {\n                rosterListCopy.push(player);\n            }\n            rosterListCopy = sortRosterList(rosterListCopy);\n            let lowestAvailableNumber: number = 1;\n            for (let i = 0; i < rosterListCopy.length; i++) {\n                if (rosterListCopy[i].getNumber() === lowestAvailableNumber) {\n                    lowestAvailableNumber++;\n                }\n                else {\n                    //if in the array sorted by player number, we find a Player whose number does not equal our incremental\n                    //tracker, that means that we can use our tracker's value as the number\n                    return lowestAvailableNumber;\n                }\n            }\n            //if we reach the end of the array without finding a number that is free for use, use the incremented value which \n            //should not be present in the array\n            return lowestAvailableNumber;\n        }\n    }\n\n\n\nfunction addPlayerToRoster(newPlayer: Player) {\n\n\n    newPlayer.setNumber(generatePlayerNumber());\n    let rosterListCopy: Player[] = [];\n    Position.getValidPositions().forEach((position) => {\n        console.log(position.getLabel);\n        let playersOfType: Player[] = [];\n        for (let player of rosterList) {\n            if (player.getPlayerType().key == position.key) {\n                playersOfType.push(player);\n            }\n        }\n        if (newPlayer.getPlayerType() == position) {\n            console.log(\"MATCH in position type\");\n            playersOfType.push(newPlayer);\n        }\n        rosterListCopy = rosterListCopy.concat(playersOfType);\n    });\n    console.log(rosterListCopy);\n    // rosterListCopy = sortRosterList(rosterListCopy);\n    setRosterList(rosterListCopy);\n    displayAddPlayerModal(false);\n}\n\n//TODO: detection function to make sure that auto increment of player numbers goes smoothly, and takes into account team members that already exist\n\nfunction displayAddPlayerModal(showModal: boolean) {\n    setShowAddPlayerModal(showModal);\n}\n\nfunction resetAddPlayerModal() {\n\n}\n\n\n\n\n\nreturn (\n    <div className=\"RosterWidget\">\n\n        <div className='RosterDisplay'>\n\n            {rosterList.filter((player: Player) => !player.isOnCourt()).map((player: Player, index) => (\n                <PlayerInRosterWidget key={player.getNumber} player={player} />\n            ))}\n        </div>\n        <Button id='showModal' onClick={() => displayAddPlayerModal(true)}>\n            Add Player\n        </Button>\n        <AddPlayerModal isOpen={showAddPlayerModal} cancelAction={(value: boolean) => { displayAddPlayerModal(value) }} submitAction={(value: Player) => { addPlayerToRoster(value) }} />\n    </div>\n);\n}\n\nexport default Roster;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAsBC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAGjE,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,MAAM,MAAM,sBAAsB;AAEzC,OAAO,oBAAoB;AAE3B,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAIW,KAAK,CAAS,CAAC,CAAC;EACjE,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAMc,qBAA+C,GAAGf,MAAM,CAAC,CAAC,CAAC;;EAEjE;;EAEA,SAASgB,cAAcA,CAACC,IAAc,EAAY;IAC9CA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAS,EAAEC,CAAS,KAAKD,CAAC,CAACE,SAAS,CAAC,CAAC,GAAGD,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;IAClE,OAAOJ,IAAI;EACf;;EAEA;EACA,SAASK,oBAAoBA,CAAA,EAAW;IACpC,IAAIZ,UAAU,CAACa,MAAM,KAAK,CAAC,EAAE;MACzB;MACA,OAAO,CAAC;IACZ,CAAC,MACI;MACD,IAAIC,cAAwB,GAAG,EAAE;MACjC,KAAK,IAAIC,MAAM,IAAIf,UAAU,EAAE;QAC3Bc,cAAc,CAACE,IAAI,CAACD,MAAM,CAAC;MAC/B;MACAD,cAAc,GAAGR,cAAc,CAACQ,cAAc,CAAC;MAC/C,IAAIG,qBAA6B,GAAG,CAAC;MACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,cAAc,CAACD,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC5C,IAAIJ,cAAc,CAACI,CAAC,CAAC,CAACP,SAAS,CAAC,CAAC,KAAKM,qBAAqB,EAAE;UACzDA,qBAAqB,EAAE;QAC3B,CAAC,MACI;UACD;UACA;UACA,OAAOA,qBAAqB;QAChC;MACJ;MACA;MACA;MACA,OAAOA,qBAAqB;IAChC;EACJ;EAIJ,SAASE,iBAAiBA,CAACC,SAAiB,EAAE;IAG1CA,SAAS,CAACC,SAAS,CAACT,oBAAoB,CAAC,CAAC,CAAC;IAC3C,IAAIE,cAAwB,GAAG,EAAE;IACjCtB,QAAQ,CAAC8B,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAAEC,QAAQ,IAAK;MAC/CC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,QAAQ,CAAC;MAC9B,IAAIC,aAAuB,GAAG,EAAE;MAChC,KAAK,IAAIb,MAAM,IAAIf,UAAU,EAAE;QAC3B,IAAIe,MAAM,CAACc,aAAa,CAAC,CAAC,CAACC,GAAG,IAAIN,QAAQ,CAACM,GAAG,EAAE;UAC5CF,aAAa,CAACZ,IAAI,CAACD,MAAM,CAAC;QAC9B;MACJ;MACA,IAAIK,SAAS,CAACS,aAAa,CAAC,CAAC,IAAIL,QAAQ,EAAE;QACvCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCE,aAAa,CAACZ,IAAI,CAACI,SAAS,CAAC;MACjC;MACAN,cAAc,GAAGA,cAAc,CAACiB,MAAM,CAACH,aAAa,CAAC;IACzD,CAAC,CAAC;IACFH,OAAO,CAACC,GAAG,CAACZ,cAAc,CAAC;IAC3B;IACAb,aAAa,CAACa,cAAc,CAAC;IAC7BkB,qBAAqB,CAAC,KAAK,CAAC;EAChC;;EAEA;;EAEA,SAASA,qBAAqBA,CAACC,SAAkB,EAAE;IAC/C7B,qBAAqB,CAAC6B,SAAS,CAAC;EACpC;EAEA,SAASC,mBAAmBA,CAAA,EAAG,CAE/B;EAMA,oBACIrC,OAAA;IAAKsC,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAEzBvC,OAAA;MAAKsC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAEzBpC,UAAU,CAACqC,MAAM,CAAEtB,MAAc,IAAK,CAACA,MAAM,CAACuB,SAAS,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACxB,MAAc,EAAEyB,KAAK,kBAClF3C,OAAA,CAACF,oBAAoB;QAAwBoB,MAAM,EAAEA;MAAO,GAAjCA,MAAM,CAACJ,SAAS;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACjE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN/C,OAAA,CAACJ,MAAM;MAACoD,EAAE,EAAC,WAAW;MAACC,OAAO,EAAEA,CAAA,KAAMd,qBAAqB,CAAC,IAAI,CAAE;MAAAI,QAAA,EAAC;IAEnE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT/C,OAAA,CAACH,cAAc;MAACqD,MAAM,EAAE5C,kBAAmB;MAAC6C,YAAY,EAAGC,KAAc,IAAK;QAAEjB,qBAAqB,CAACiB,KAAK,CAAC;MAAC,CAAE;MAACC,YAAY,EAAGD,KAAa,IAAK;QAAE9B,iBAAiB,CAAC8B,KAAK,CAAC;MAAC;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChL,CAAC;AAEV;AAAC7C,EAAA,CAlGQD,MAAM;AAAAqD,EAAA,GAANrD,MAAM;AAoGf,eAAeA,MAAM;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}